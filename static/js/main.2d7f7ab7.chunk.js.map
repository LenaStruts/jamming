{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","spotifyEndpoint","Spotify","getAccessToken","searchTerms","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","localStorage","setItem","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","getItem","removeItem","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2d7f7ab7.chunk.js","sourcesContent":["const clientId = 'c4cf5e4406b14d5c9caf202f2244d04a';\nconst redirectUri = process.env.NODE_ENV === 'production' ? 'https://lenastruts.github.io/jamming/' : 'http://localhost:3000';\nconst spotifyEndpoint = 'https://api.spotify.com/v1';\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken(searchTerms) {\n        if (accessToken) {\n            return accessToken;\n        }\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            if (searchTerms) {\n                localStorage.setItem('searchTerms', searchTerms);\n            }\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken(term);\n        return fetch(`${spotifyEndpoint}/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n            }));\n        });\n    },\n\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n\n        return fetch(`${spotifyEndpoint}/me`, { headers: headers }).then(response => response.json()).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`${spotifyEndpoint}/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`${spotifyEndpoint}/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris })\n                });\n            });\n        });\n    }\n};\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: ''\n    };\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(event) {\n    this.setState({ term: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n          <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n          <button className=\"SearchButton\" onClick = {this.search}>SEARCH</button>\n      </div>\n    );\n  }\n}\n  \nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n    \n    renderAction () {\n        if (this.props.isRemoval) {\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>;\n        } else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album} </p>\n                </div>\n                {this.renderAction()}\n            </div>\n        );\n    }\n}\n\nexport default Track;\n","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n        <div className=\"TrackList\">\n            {\n                this.props.tracks.map(track => {\n                    return <Track track={track} \n                                  key={track.id} \n                                  onAdd={this.props.onAdd} \n                                  isRemoval={this.props.isRemoval}\n                                  onRemove={this.props.onRemove} />\n                })\n            }\n        </div>\n    );\n  }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n          <h2>Results</h2>\n          <TrackList tracks={this.props.searchResults}\n                     onAdd={this.props.onAdd} />\n      </div>\n    );\n  }\n}\n  \nexport default SearchResults;","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return (\n        <div className=\"Playlist\">\n            <input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n            <TrackList tracks={this.props.playlistTracks} \n                       isRemoval={true}\n                       onRemove={this.props.onRemove} />\n            <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n        </div>\n    );\n  }\n}\n\nexport default Playlist;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  componentDidMount() {\n    const searchTerms = localStorage.getItem('searchTerms');\n    if (searchTerms) {\n      localStorage.removeItem('searchTerms');\n      this.search(searchTerms);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} \n                           onAdd={this.addTrack} />\n            <Playlist playlistTracks={this.state.playlistTracks} \n                      onNameChange={this.updatePlaylistName}\n                      onRemove={this.removeTrack} \n                      onSave={this.savePlaylist} /> \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}